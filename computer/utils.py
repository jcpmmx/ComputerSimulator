# -*- coding: utf-8 -*-


from __future__ import print_function, unicode_literals


class ComputerStack(object):
    """
    Class that implements a computer stack using a dict.

    A computer stack is just a place to store all instructions of the computer.
    Data resulting from those instructions will be stored in a simple 'local memory' attribute.
    """
    _stack = {}
    _stack_pointer = 0
    _stack_size = 0

    _memory = []  # 'Local memory' that stores values while executing computer instructions

    def __init__(self, stack_size):
        """
        Creates a new `ComputerStack` with `stack_size` slots (initially empty).

        :param stack_size: The size for the current stack
        """
        self._stack = {idx: (None, None) for idx in xrange(stack_size)}
        self._stack_size = stack_size

    def __str__(self):
        """
        Returns a string representation of a `ComputerStack`.
        """
        return '***\n{}\n***'.format('\n'.join('{:3.0f}: {}'.format(k, v or '-') for k, v in self._stack.items()))

    @property
    def pointer(self):
        return self._stack_pointer

    def set_index(self, index):
        """
        Sets the specific value to serve as index of the stack.

        :param index: The target index
        :return: None
        """
        if index <= self._stack_size:
            self._stack_pointer = index

    def add_instruction(self, item):
        """
        Stores `item` into the stack, to the current position of the stack pointer.
        It also sets the stack pointer to the index that the next item should have.

        :param item: The item to be added to the stack
        :return: None
        """
        self._stack[self._stack_pointer] = item
        self._stack_pointer += 1

    def get_instruction(self, index):
        """
        Returns (without removing) the item that sits in the stack at index.

        :return: The value from the stack at index, if any
        """
        return self._stack.get(index, (None, None))

    def push_to_memory(self, value):
        """
        Pushes `value` to local memory.

        :param value: The item to be added to local memory
        """
        self._memory.append(value)

    def pop_from_memory(self):
        """
        Pops the latest value stored in local memory, if any.

        :return: The value from the stack at index, if any
        """
        try:
            return self._memory.pop()
        except IndexError:
            pass


class ComputerException(Exception):
    """
    Class that just to customize exceptions generated by `Computer` if needed.
    """
    pass
