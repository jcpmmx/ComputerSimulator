# -*- coding: utf-8 -*-


from __future__ import print_function, unicode_literals


class Stack(object):
    """
    Class that implements a stack using a dict.

    It varies slightly from a traditional stack as it supports pushing to and getting values from a specific index.
    """
    _stack = {}
    _stack_size = 0
    _stack_pointer = 0

    def __init__(self, stack_size):
        """
        Creates a new `Stack` with `stack_size` slots (initially empty).

        :param stack_size: The size for the current stack
        """
        self._stack = {idx: None for idx in xrange(stack_size)}
        self._stack_size = stack_size

    def __str__(self):
        """
        Returns a string representation of a `Stack`.
        """
        return '***\n{}\n***'.format('\n'.join('{:3.0f}: {}'.format(k, v or '-') for k, v in self._stack.items()))

    @property
    def pointer(self):
        return self._stack_pointer

    def set_index(self, index):
        """
        Sets the specific value to serve as index of the stack.

        :param index: The target index
        :return: None
        """
        if index <= self._stack_size:
            self._stack_pointer = index

    def push(self, item):
        """
        Stores `item` into the stack, to the current position of the stack pointer.
        It also sets the stack pointer to the index that the next item should have.

        :param item: The item to be added to the stack
        :return: None
        """
        self._stack[self._stack_pointer] = item
        self._stack_pointer += 1

    def pop(self):
        """
        Returns the item that sits on top of the stack.

        :return: The item to be returned from the top of the stack
        """
        last_stack_pointer = self._stack_pointer
        item = self._stack[last_stack_pointer]
        self._stack[last_stack_pointer] = None
        # Setting the pointer to the next non-None value in the stack
        for idx in range(self._stack_pointer)[::-1]:
            if self._stack[idx]:
                self._stack_pointer = idx
                break
        if self._stack_pointer == last_stack_pointer:
            self._stack_pointer = 0
        return item

    def get(self, index):
        """
        Returns (without removing) the item that sits in the stack at index.

        :return: The value from the stack at index, if any
        """
        return self._stack.get(index)


class ComputerException(Exception):
    """
    Class that just to customize exceptions generated by `Computer` if needed.
    """
    pass
